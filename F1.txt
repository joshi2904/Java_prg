#Introduction about Flutter, tools which helps to build flutter
- Widgets:- Material, Scaffold, Text, Column, Row, Container, FloatingActionButton
- knowing about Stateless & Stateful Widget






import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Flutter Introduction')),
        body: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Hello, Flutter!', style: TextStyle(fontSize: 24)),
            Container(
              padding: EdgeInsets.all(16),
              color: Colors.blue,
              child: Text('This is a container widget'),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('Row 1'),
                SizedBox(width: 10),
                Text('Row 2'),
              ],
            ),
          ],
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () {},
          child: Icon(Icons.add),
        ),
      ),
    );
  }
}


(2)

 Stateless Widgets
These widgets are immutable, meaning their properties cannot change after they are created.
Used for static content like headers, icons, or fixed layouts.
Example:
dart
Copy code
class MyStatelessWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Text('I am a Stateless Widget');
  }
}


(3)
2. Stateful Widgets
These widgets are mutable, meaning they can hold and update state over time.
Used for dynamic content like user input, animations, or any UI that changes.
Composed of two parts:
StatefulWidget: The widget class.
State: The state logic, where updates are handled.
Example:

dart
Copy code
class MyStatefulWidget extends StatefulWidget {
  @override
  _MyStatefulWidgetState createState() => _MyStatefulWidgetState();
}

class _MyStatefulWidgetState extends State<MyStatefulWidget> {
  int counter = 0;

  void incrementCounter() {
    setState(() {
      counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text('Counter: $counter'),
        ElevatedButton(
          onPressed: incrementCounter,
          child: Text('Increment'),
        ),
      ],
    );
  }
}




#Git Setup
- Git & GitHub
- App - 1 (Login & Registration with Navigation)
- Widgets:- Image, Padding, Stack, Form, SingleChildScrollView, TextField, TextformField
- commit & Push on github
Assignment 1:-
- BMI Calculator
- take 3 value Age, height, Weight with proper validation
- Make function that have Calculate result
- show result on bigger font
- put screenshot on readme file
- upload project on github


=>App 1: Login & Registration with Navigation
Widgets Used
Image: Displays an image from assets or the network.
Padding: Adds spacing around widgets.
Stack: Places widgets on top of each other.
Form: A container for grouping multiple input fields.
SingleChildScrollView: Allows scrolling for widgets that exceed screen height.
TextField & TextFormField: Input fields for user text.
Example Code for Login & Registration
dart
Copy code
import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: LoginScreen(),
    );
  }
}

class LoginScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Login')),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Form(
          child: Column(
            children: [
              Image.asset('assets/login_image.png', height: 100),
              TextFormField(
                decoration: InputDecoration(labelText: 'Email'),
              ),
              SizedBox(height: 10),
              TextFormField(
                decoration: InputDecoration(labelText: 'Password'),
                obscureText: true,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => RegistrationScreen()),
                  );
                },
                child: Text('Login'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class RegistrationScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Register')),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Form(
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(labelText: 'Name'),
              ),
              SizedBox(height: 10),
              TextFormField(
                decoration: InputDecoration(labelText: 'Email'),
              ),
              SizedBox(height: 10),
              TextFormField(
                decoration: InputDecoration(labelText: 'Password'),
                obscureText: true,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                child: Text('Register'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}





Assignment 1: BMI Calculator
Requirements
Accept three inputs: Age, Height (cm), and Weight (kg) with validation.
Calculate BMI using the formula:
𝐵
𝑀
𝐼
=
Weight (kg)
Height (m)
2
BMI= 
Height (m) 
2
 
Weight (kg)
​
 
Display the result in a large font size.
Add a screenshot to the README.md file.
Push the project to GitHub.
Example Code for BMI Calculator
dart
Copy code
import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: BMICalculator(),
    );
  }
}

class BMICalculator extends StatefulWidget {
  @override
  _BMICalculatorState createState() => _BMICalculatorState();
}

class _BMICalculatorState extends State<BMICalculator> {
  final _formKey = GlobalKey<FormState>();
  final _ageController = TextEditingController();
  final _heightController = TextEditingController();
  final _weightController = TextEditingController();

  double _bmi = 0.0;

  void _calculateBMI() {
    if (_formKey.currentState!.validate()) {
      final age = int.parse(_ageController.text);
      final height = double.parse(_heightController.text) / 100; // Convert cm to meters
      final weight = double.parse(_weightController.text);

      setState(() {
        _bmi = weight / (height * height);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('BMI Calculator')),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _ageController,
                decoration: InputDecoration(labelText: 'Age'),
                keyboardType: TextInputType.number,
                validator: (value) => value!.isEmpty ? 'Enter your age' : null,
              ),
              SizedBox(height: 10),
              TextFormField(
                controller: _heightController,
                decoration: InputDecoration(labelText: 'Height (cm)'),
                keyboardType: TextInputType.number,
                validator: (value) => value!.isEmpty ? 'Enter your height' : null,
              ),
              SizedBox(height: 10),
              TextFormField(
                controller: _weightController,
                decoration: InputDecoration(labelText: 'Weight (kg)'),
                keyboardType: TextInputType.number,
                validator: (value) => value!.isEmpty ? 'Enter your weight' : null,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _calculateBMI,
                child: Text('Calculate BMI'),
              ),
              SizedBox(height: 20),
              Text(
                _bmi == 0.0 ? '' : 'Your BMI is ${_bmi.toStringAsFixed(2)}',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
            ],
          ),
        ),
      ),
    );
  }
}




#Expense App
- App -1 (Main page List view design & custom Widgets, class)
- Widgets:- IconButton, Listview.builder, showdatepicker,
- make controller
- map

=>
Example Code for Expense App
Main Page Design
dart
Copy code
import 'package:flutter/material.dart';

void main() => runApp(ExpenseApp());

class ExpenseApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ExpenseHomePage(),
    );
  }
}

class ExpenseHomePage extends StatefulWidget {
  @override
  _ExpenseHomePageState createState() => _ExpenseHomePageState();
}

class _ExpenseHomePageState extends State<ExpenseHomePage> {
  final List<Map<String, dynamic>> _expenses = [
    {"title": "Groceries", "amount": 50.0, "date": DateTime.now()},
    {"title": "Movies", "amount": 20.0, "date": DateTime.now()},
  ];

  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _amountController = TextEditingController();

  void _addExpense(String title, double amount, DateTime date) {
    setState(() {
      _expenses.add({"title": title, "amount": amount, "date": date});
    });
  }

  Future<void> _showAddExpenseDialog() async {
    DateTime? selectedDate;

    await showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Add Expense"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: _titleController,
                decoration: InputDecoration(labelText: "Title"),
              ),
              TextField(
                controller: _amountController,
                decoration: InputDecoration(labelText: "Amount"),
                keyboardType: TextInputType.number,
              ),
              IconButton(
                icon: Icon(Icons.calendar_today),
                onPressed: () async {
                  selectedDate = await showDatePicker(
                    context: context,
                    initialDate: DateTime.now(),
                    firstDate: DateTime(2000),
                    lastDate: DateTime(2100),
                  );
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                final title = _titleController.text;
                final amount = double.tryParse(_amountController.text) ?? 0.0;
                if (title.isNotEmpty && amount > 0 && selectedDate != null) {
                  _addExpense(title, amount, selectedDate!);
                  _titleController.clear();
                  _amountController.clear();
                  Navigator.of(context).pop();
                }
              },
              child: Text("Add"),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text("Cancel"),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Expense Tracker"),
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            onPressed: _showAddExpenseDialog,
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: _expenses.length,
        itemBuilder: (context, index) {
          final expense = _expenses[index];
          return ExpenseItem(expense: expense);
        },
      ),
    );
  }
}



#- App - 1
- Creating Own Custom Widgets
Assignment 2:-
- Calculator App
- normal Calculator app that calculate basic +, -, *, /
- App will display proper in portrait and landscape mode
- upload it on github


=>App - 1: Creating Your Own Custom Widgets
Introduction to Custom Widgets
Custom widgets in Flutter help encapsulate and reuse UI components, improving code readability and maintainability. Custom widgets can represent anything, from a single button to a complex reusable UI component.

Example: Custom Button Widget
Here’s an example of creating a custom button widget.

dart
Copy code
import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: CustomWidgetExample(),
    );
  }
}

class CustomWidgetExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Custom Widget Example')),
      body: Center(
        child: CustomButton(
          text: "Click Me",
          color: Colors.blue,
          onPressed: () {
            print("Custom Button Pressed!");
          },
        ),
      ),
    );
  }
}

class CustomButton extends StatelessWidget {
  final String text;
  final Color color;
  final VoidCallback onPressed;

  CustomButton({required this.text, required this.color, required this.onPressed});

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      style: ElevatedButton.styleFrom(backgroundColor: color),
      onPressed: onPressed,
      child: Text(text),
    );
  }
}



Example Code for Calculator App
dart
Copy code
import 'package:flutter/material.dart';

void main() => runApp(CalculatorApp());

class CalculatorApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Calculator(),
    );
  }
}

class Calculator extends StatefulWidget {
  @override
  _CalculatorState createState() => _CalculatorState();
}

class _CalculatorState extends State<Calculator> {
  String _display = "0";
  String _operation = "";
  double _firstOperand = 0;
  double _secondOperand = 0;
  bool _isSecondOperand = false;

  void _input(String value) {
    setState(() {
      if (value == "C") {
        _display = "0";
        _operation = "";
        _firstOperand = 0;
        _secondOperand = 0;
        _isSecondOperand = false;
      } else if ("+-*/".contains(value)) {
        _firstOperand = double.parse(_display);
        _operation = value;
        _isSecondOperand = true;
      } else if (value == "=") {
        _secondOperand = double.parse(_display);
        switch (_operation) {
          case "+":
            _display = (_firstOperand + _secondOperand).toString();
            break;
          case "-":
            _display = (_firstOperand - _secondOperand).toString();
            break;
          case "*":
            _display = (_firstOperand * _secondOperand).toString();
            break;
          case "/":
            _display = _secondOperand != 0
                ? (_firstOperand / _secondOperand).toString()
                : "Error";
            break;
        }
        _isSecondOperand = false;
      } else {
        if (_display == "0" || _isSecondOperand) {
          _display = value;
          _isSecondOperand = false;
        } else {
          _display += value;
        }
      }
    });
  }

  Widget _buildButton(String value, {Color? color}) {
    return ElevatedButton(
      style: ElevatedButton.styleFrom(
        backgroundColor: color ?? Colors.blue,
        padding: EdgeInsets.all(20),
      ),
      onPressed: () => _input(value),
      child: Text(value, style: TextStyle(fontSize: 24)),
    );
  }

  @override
  Widget build(BuildContext context) {
    final isPortrait = MediaQuery.of(context).orientation == Orientation.portrait;

    return Scaffold(
      appBar: AppBar(title: Text("Calculator")),
      body: isPortrait ? _buildPortraitLayout() : _buildLandscapeLayout(),
    );
  }

  Widget _buildPortraitLayout() {
    return Column(
      children: [
        Expanded(
          child: Container(
            alignment: Alignment.centerRight,
            padding: EdgeInsets.all(20),
            child: Text(_display, style: TextStyle(fontSize: 36)),
          ),
        ),
        Divider(),
        ..._buildButtonRows(),
      ],
    );
  }

  Widget _buildLandscapeLayout() {
    return Row(
      children: [
        Expanded(
          child: Container(
            alignment: Alignment.centerRight,
            padding: EdgeInsets.all(20),
            child: Text(_display, style: TextStyle(fontSize: 36)),
          ),
        ),
        VerticalDivider(),
        Expanded(
          flex: 2,
          child: Column(
            children: _buildButtonRows(),
          ),
        ),
      ],
    );
  }

  List<Widget> _buildButtonRows() {
    return [
      Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildButton("7"),
          _buildButton("8"),
          _buildButton("9"),
          _buildButton("/", color: Colors.orange),
        ],
      ),
      Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildButton("4"),
          _buildButton("5"),
          _buildButton("6"),
          _buildButton("*", color: Colors.orange),
        ],
      ),
      Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildButton("1"),
          _buildButton("2"),
          _buildButton("3"),
          _buildButton("-", color: Colors.orange),
        ],
      ),
      Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildButton("C", color: Colors.red),
          _buildButton("0"),
          _buildButton("="),
          _buildButton("+", color: Colors.orange),
        ],
      ),
    ];
  }
}




#- App - 1 (themes)
- Advance theme property
- how to inherit themes

=>1. Applying a Basic Theme
To use themes in a Flutter app, wrap the app with a ThemeData inside the MaterialApp.

Basic Example
dart
Copy code
import 'package:flutter/material.dart';

void main() => runApp(ThemeApp());

class ThemeApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primarySwatch: Colors.blue,
        accentColor: Colors.amber,
        textTheme: TextTheme(
          bodyLarge: TextStyle(fontSize: 20, color: Colors.black),
          bodyMedium: TextStyle(fontSize: 18, color: Colors.grey[600]),
        ),
      ),
      home: ThemeDemoPage(),
    );
  }
}

class ThemeDemoPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Flutter Themes"),
      ),
      body: Center(
        child: Text(
          "Hello, Theme!",
          style: Theme.of(context).textTheme.bodyLarge,
        ),
      ),
    );
  }
}
2. Advanced Theme Properties
Flutter's ThemeData supports many properties for customization. Here are some commonly used ones:

Color Scheme
Allows you to define a more detailed color palette.

dart
Copy code
theme: ThemeData(
  colorScheme: ColorScheme.fromSwatch(
    primarySwatch: Colors.blue,
  ).copyWith(
    secondary: Colors.amber,
  ),
),
Typography
Customizing font sizes, weights, and styles.

dart
Copy code
textTheme: TextTheme(
  bodyLarge: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
  titleLarge: TextStyle(fontSize: 24, color: Colors.blueAccent),
),
Button Themes
Customize button appearances globally.

dart
Copy code
buttonTheme: ButtonThemeData(
  buttonColor: Colors.blue,
  shape: RoundedRectangleBorder(
    borderRadius: BorderRadius.circular(8),
  ),
),
Input Decoration Theme
Styling input fields across the app.

dart
Copy code
inputDecorationTheme: InputDecorationTheme(
  border: OutlineInputBorder(),
  focusedBorder: OutlineInputBorder(
    borderSide: BorderSide(color: Colors.blue, width: 2.0),
  ),
),
3. Inheriting Themes
What is Theme Inheritance?
Theme inheritance allows you to reuse a theme from a parent widget and apply customizations only where needed, without redefining the entire theme.

Example: Using Theme.of(context)
You can fetch the current theme properties using Theme.of(context).

dart
Copy code
class InheritThemeExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Inherited Theme",
          style: theme.textTheme.titleLarge,
        ),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {},
          child: Text("Click Me"),
          style: ElevatedButton.styleFrom(
            primary: theme.colorScheme.secondary, // Using inherited theme color
          ),
        ),
      ),
    );
  }
}
Example: Extending the Parent Theme
You can modify an inherited theme for specific sections.

dart
Copy code
class CustomThemeDemo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Theme(
      data: Theme.of(context).copyWith(
        colorScheme: Theme.of(context).colorScheme.copyWith(
          primary: Colors.green,
        ),
      ),
      child: Scaffold(
        appBar: AppBar(
          title: Text("Custom Theme"),
        ),
        body: Center(
          child: Text("This section has a green theme!"),
        ),
      ),
    );
  }
}
4. Switching Between Light and Dark Themes
Flutter provides a convenient way to switch between light and dark themes.

Example: Light & Dark Theme Toggle
dart
Copy code
import 'package:flutter/material.dart';

void main() => runApp(ThemeToggleApp());

class ThemeToggleApp extends StatefulWidget {
  @override
  _ThemeToggleAppState createState() => _ThemeToggleAppState();
}

class _ThemeToggleAppState extends State<ThemeToggleApp> {
  bool _isDarkMode = false;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.light(),
      darkTheme: Theme
	  
	  
	  
	  
#- Postman tool
- App - 2 (News App)
- http package
- async & await
- getting data from open API(https://newsapi.org/)
- category is on drawer view


=>Code: News App
1. Main Structure
dart
Copy code
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() => runApp(NewsApp());

class NewsApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: NewsHomePage(),
    );
  }
}
2. Fetch News Data
dart
Copy code
class NewsHomePage extends StatefulWidget {
  @override
  _NewsHomePageState createState() => _NewsHomePageState();
}

class _NewsHomePageState extends State<NewsHomePage> {
  List<dynamic> _articles = [];
  String _category = "general";

  @override
  void initState() {
    super.initState();
    _fetchNews();
  }

  Future<void> _fetchNews() async {
    final url = Uri.parse(
        'https://newsapi.org/v2/top-headlines?country=us&category=$_category&apiKey=your_api_key');
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          _articles = data['articles'];
        });
      } else {
        throw Exception("Failed to load news");
      }
    } catch (e) {
      print(e);
    }
  }

  void _updateCategory(String category) {
    setState(() {
      _category = category;
    });
    _fetchNews();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("News App"),
      ),
      drawer: NewsCategoryDrawer(
        selectedCategory: _category,
        onCategorySelect: _updateCategory,
      ),
      body: _articles.isEmpty
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: _articles.length,
              itemBuilder: (context, index) {
                final article = _articles[index];
                return ListTile(
                  leading: article['urlToImage'] != null
                      ? Image.network(article['urlToImage'], width: 50, fit: BoxFit.cover)
                      : Icon(Icons.article),
                  title: Text(article['title'] ?? "No Title"),
                  subtitle: Text(article['description'] ?? "No Description"),
                  onTap: () => _openArticle(article['url']),
                );
              },
            ),
    );
  }

  void _openArticle(String url) {
    // Open article in a web view or browser.
  }
}
3. Drawer for Categories
dart
Copy code
class NewsCategoryDrawer extends StatelessWidget {
  final String selectedCategory;
  final Function(String) onCategorySelect;

  NewsCategoryDrawer({
    required this.selectedCategory,
    required this.onCategorySelect,
  });

  final categories = [
    'business',
    'entertainment',
    'general',
    'health',
    'science',
    'sports',
    'technology'
  ];

  @override
  Widget build(BuildContext context) {
    return Drawer(
      child: ListView(
        children: [
          DrawerHeader(
            decoration: BoxDecoration(color: Colors.blue),
            child: Text(
              "Categories",
              style: TextStyle(color: Colors.white, fontSize: 24),
            ),
          ),
          ...categories.map((category) {
            return ListTile(
              title: Text(category),
              selected: selectedCategory == category,
              onTap: () {
                Navigator.pop(context);
                onCategorySelect(category);
              },
            );
          }).toList(),
        ],
      ),
    );
  }
}
Async and Await Explanation
async: Marks a function as asynchronous, allowing it to use await for asynchronous operations.
await: Pauses the function execution until the asynchronous task is complete.
Example:
dart
Copy code
Future<void> fetchData() async {
  final response = await http.get(Uri.parse('https://api.example.com/data'));
  if (response.statusCode == 200) {
    print(response.body);
  } else {
    throw Exception("Failed to load data");
  }
}
Enhancements
Error Handling: Display error messages when data fails to load.
Pull-to-Refresh: Use RefreshIndicator to refresh news on swipe.
Web View for Articles: Use webview_flutter to display articles inside the app.
Search Functionality: Allow users to search for specific news articles.



